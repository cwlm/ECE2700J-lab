/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module \4b_add  (
  input a3,
  input a2,
  input a1,
  input a0,
  input b3,
  input b2,
  input b1,
  input b0,
  output S3,
  output S2,
  output S1,
  output S0,
  output Cout
);
  wire s4;
  wire s5;
  wire s6;
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( a0 ),
    .b( b0 ),
    .c_i( 1'b0 ),
    .s( S0 ),
    .c_o( s6 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( a1 ),
    .b( b1 ),
    .c_i( s6 ),
    .s( S1 ),
    .c_o( s5 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i2 (
    .a( a2 ),
    .b( b2 ),
    .c_i( s5 ),
    .s( S2 ),
    .c_o( s4 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i3 (
    .a( a3 ),
    .b( b3 ),
    .c_i( s4 ),
    .s( S3 ),
    .c_o( Cout )
  );
endmodule

module \4b_or  (
  input a3,
  input a2,
  input a1,
  input a0,
  input b3,
  input b2,
  input b1,
  input b0,
  output S3,
  output S2,
  output S1,
  output S0,
  output Cout
);
  assign Cout = 1'b0;
  assign S0 = (a0 | b0);
  assign S1 = (a1 | b1);
  assign S2 = (a2 | b2);
  assign S3 = (a3 | b3);
endmodule

module \4b_and  (
  input a3,
  input a2,
  input a1,
  input a0,
  input b3,
  input b2,
  input b1,
  input b0,
  output S3,
  output S2,
  output S1,
  output S0,
  output Cout
);
  assign Cout = 1'b0;
  assign S0 = (a0 & b0);
  assign S1 = (a1 & b1);
  assign S2 = (a2 & b2);
  assign S3 = (a3 & b3);
endmodule

module \4b_sub  (
  input a3,
  input a2,
  input a1,
  input a0,
  input b3,
  input b2,
  input b1,
  input b0,
  output S3,
  output S2,
  output S1,
  output S0,
  output Cout
);
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  assign s10 = ~ b0;
  assign s8 = ~ b1;
  assign s6 = ~ b2;
  assign s4 = ~ b3;
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( a0 ),
    .b( s10 ),
    .c_i( 1'b1 ),
    .s( S0 ),
    .c_o( s9 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i1 (
    .a( a1 ),
    .b( s8 ),
    .c_i( s9 ),
    .s( S1 ),
    .c_o( s7 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i2 (
    .a( a2 ),
    .b( s6 ),
    .c_i( s7 ),
    .s( S2 ),
    .c_o( s5 )
  );
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i3 (
    .a( a3 ),
    .b( s4 ),
    .c_i( s5 ),
    .s( S3 ),
    .c_o( Cout )
  );
endmodule

module mux1b2x1 (
  input a,
  input b,
  input s,
  output Out
);
  assign Out = ((a & ~ s) | (b & s));
endmodule

module mux5b4x2 (
  input a3,
  input b3,
  input a2,
  input b2,
  input a1,
  input b1,
  input a0,
  input b0,
  input c3,
  input d3,
  input c2,
  input d2,
  input c1,
  input d1,
  input c0,
  input d0,
  input s,
  input ac,
  input bc,
  input cc,
  input dc,
  output outa3,
  output outa2,
  output outa1,
  output outa0,
  output outb3,
  output outb2,
  output outb1,
  output outb0,
  output outac,
  output outbc
);
  mux1b2x1 mux1b2x1_i0 (
    .a( a3 ),
    .b( b3 ),
    .s( s ),
    .Out( outa3 )
  );
  mux1b2x1 mux1b2x1_i1 (
    .a( a2 ),
    .b( b2 ),
    .s( s ),
    .Out( outa2 )
  );
  mux1b2x1 mux1b2x1_i2 (
    .a( a1 ),
    .b( b1 ),
    .s( s ),
    .Out( outa1 )
  );
  mux1b2x1 mux1b2x1_i3 (
    .a( a0 ),
    .b( b0 ),
    .s( s ),
    .Out( outa0 )
  );
  mux1b2x1 mux1b2x1_i4 (
    .a( c3 ),
    .b( d3 ),
    .s( s ),
    .Out( outb3 )
  );
  mux1b2x1 mux1b2x1_i5 (
    .a( c2 ),
    .b( d2 ),
    .s( s ),
    .Out( outb2 )
  );
  mux1b2x1 mux1b2x1_i6 (
    .a( c1 ),
    .b( d1 ),
    .s( s ),
    .Out( outb1 )
  );
  mux1b2x1 mux1b2x1_i7 (
    .a( c0 ),
    .b( d0 ),
    .s( s ),
    .Out( outb0 )
  );
  mux1b2x1 mux1b2x1_i8 (
    .a( ac ),
    .b( bc ),
    .s( s ),
    .Out( outac )
  );
  mux1b2x1 mux1b2x1_i9 (
    .a( cc ),
    .b( dc ),
    .s( s ),
    .Out( outbc )
  );
endmodule

module mux5b2x1 (
  input a3,
  input b3,
  input a2,
  input b2,
  input a1,
  input b1,
  input a0,
  input b0,
  input s,
  input ac,
  input bc,
  output out3,
  output out2,
  output out1,
  output out0,
  output outc
);
  mux1b2x1 mux1b2x1_i0 (
    .a( a3 ),
    .b( b3 ),
    .s( s ),
    .Out( out3 )
  );
  mux1b2x1 mux1b2x1_i1 (
    .a( a2 ),
    .b( b2 ),
    .s( s ),
    .Out( out2 )
  );
  mux1b2x1 mux1b2x1_i2 (
    .a( a1 ),
    .b( b1 ),
    .s( s ),
    .Out( out1 )
  );
  mux1b2x1 mux1b2x1_i3 (
    .a( a0 ),
    .b( b0 ),
    .s( s ),
    .Out( out0 )
  );
  mux1b2x1 mux1b2x1_i4 (
    .a( ac ),
    .b( bc ),
    .s( s ),
    .Out( outc )
  );
endmodule

module mux5b4x1 (
  input a3,
  input b3,
  input a2,
  input b2,
  input a1,
  input b1,
  input a0,
  input b0,
  input s1,
  input c3,
  input d3,
  input c2,
  input d2,
  input c1,
  input d1,
  input c0,
  input d0,
  input s0,
  input ac,
  input bc,
  input cc,
  input dc,
  output out1,
  output out2,
  output out3,
  output out0,
  output outc
);
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  mux5b4x2 mux5b4x2_i0 (
    .a3( a3 ),
    .b3( b3 ),
    .a2( a2 ),
    .b2( b2 ),
    .a1( a1 ),
    .b1( b1 ),
    .a0( a0 ),
    .b0( b0 ),
    .c3( c3 ),
    .d3( d3 ),
    .c2( c2 ),
    .d2( d2 ),
    .c1( c1 ),
    .d1( d1 ),
    .c0( c0 ),
    .d0( d0 ),
    .s( s0 ),
    .ac( ac ),
    .bc( bc ),
    .cc( cc ),
    .dc( dc ),
    .outa3( s2 ),
    .outa2( s3 ),
    .outa1( s4 ),
    .outa0( s5 ),
    .outb3( s6 ),
    .outb2( s7 ),
    .outb1( s8 ),
    .outb0( s9 ),
    .outac( s10 ),
    .outbc( s11 )
  );
  mux5b2x1 mux5b2x1_i1 (
    .a3( s2 ),
    .b3( s6 ),
    .a2( s3 ),
    .b2( s7 ),
    .a1( s4 ),
    .b1( s8 ),
    .a0( s5 ),
    .b0( s9 ),
    .s( s1 ),
    .ac( s10 ),
    .bc( s11 ),
    .out3( out3 ),
    .out2( out2 ),
    .out1( out1 ),
    .out0( out0 ),
    .outc( outc )
  );
endmodule

module main (
  input a3,
  input b3,
  input a2,
  input b2,
  input a1,
  input b1,
  input a0,
  input b0,
  input s1,
  input s0,
  output out0,
  output out1,
  output out2,
  output out3,
  output outc
);
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  \4b_add  \4b_add_i0 (
    .a3( a3 ),
    .a2( a2 ),
    .a1( a1 ),
    .a0( a0 ),
    .b3( b3 ),
    .b2( b2 ),
    .b1( b1 ),
    .b0( b0 ),
    .S3( s2 ),
    .S2( s3 ),
    .S1( s4 ),
    .S0( s5 ),
    .Cout( s6 )
  );
  \4b_or  \4b_or_i1 (
    .a3( a3 ),
    .a2( a2 ),
    .a1( a1 ),
    .a0( a0 ),
    .b3( b3 ),
    .b2( b2 ),
    .b1( b1 ),
    .b0( b0 ),
    .S3( s7 ),
    .S2( s8 ),
    .S1( s9 ),
    .S0( s10 ),
    .Cout( s11 )
  );
  \4b_and  \4b_and_i2 (
    .a3( a3 ),
    .a2( a2 ),
    .a1( a1 ),
    .a0( a0 ),
    .b3( b3 ),
    .b2( b2 ),
    .b1( b1 ),
    .b0( b0 ),
    .S3( s12 ),
    .S2( s13 ),
    .S1( s14 ),
    .S0( s15 ),
    .Cout( s16 )
  );
  \4b_sub  \4b_sub_i3 (
    .a3( a3 ),
    .a2( a2 ),
    .a1( a1 ),
    .a0( a0 ),
    .b3( b3 ),
    .b2( b2 ),
    .b1( b1 ),
    .b0( b0 ),
    .S3( s17 ),
    .S2( s18 ),
    .S1( s19 ),
    .S0( s20 ),
    .Cout( s21 )
  );
  mux5b4x1 mux5b4x1_i4 (
    .a3( s2 ),
    .b3( s17 ),
    .a2( s3 ),
    .b2( s18 ),
    .a1( s4 ),
    .b1( s19 ),
    .a0( s5 ),
    .b0( s20 ),
    .s1( s1 ),
    .c3( s12 ),
    .d3( s7 ),
    .c2( s13 ),
    .d2( s8 ),
    .c1( s14 ),
    .d1( s9 ),
    .c0( s15 ),
    .d0( s10 ),
    .s0( s0 ),
    .ac( s6 ),
    .bc( s21 ),
    .cc( s16 ),
    .dc( s11 ),
    .out1( out1 ),
    .out2( out2 ),
    .out3( out3 ),
    .out0( out0 ),
    .outc( outc )
  );
endmodule
